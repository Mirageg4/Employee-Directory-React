{"version":3,"sources":["components/employee.js","components/form.js","App.js","serviceWorker.js","index.js"],"names":["employee","props","employerGroup","length","className","map","result","key","id","firstName","lastName","type","email","phone","Form","class","value","name","onChange","handleInputChange","placeholder","onClick","handleFormSubmit","App","state","sorted","event","target","setState","preventDefault","findFirstName","Array","console","log","filtersReturnNewArrays","filter","includes","sortName","unsorted","sortof","sort","a","b","stylle","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4UA6BeA,MA1Bf,SAAkBC,GAGd,OACI,6BACKA,EAAMC,cAAcC,OACjB,wBAAIC,UAAU,cAETH,EAAMC,cAAcG,KAAI,SAAAC,GAAM,OAC3B,wBAAIF,UAAU,kBAAkBG,IAAKD,EAAOE,IACxC,yBAAKA,GAAG,QAAO,qCAAcF,EAAOG,UAApC,IAAgDH,EAAOI,SACnD,6BACA,sCAFJ,IAEoBJ,EAAOK,MAC3B,yBAAKH,GAAG,SAAQ,sCAAhB,IAAgCF,EAAOM,MACnC,6BACA,6CAFJ,IAE2BN,EAAOO,YAK1C,gE,OCWLC,MA9Bf,SAAcb,GAEV,OACI,6BACI,6BACA,kDACA,6BACA,6FAEA,yBAAKc,MAAM,aACP,0BAAMX,UAAU,QAEZ,2BACIY,MAAOf,EAAMQ,UACbQ,KAAK,YACLC,SAAUjB,EAAMkB,kBAChBR,KAAK,OACLS,YAAY,2BAEhB,6BACA,4BAAQC,QAASpB,EAAMqB,kBAAvB,qBAGR,6BACA,0FCiDGC,E,4MAtEbC,MAAQ,CACJC,OAAQvB,EACRO,UAAW,GACXC,SAAU,I,EAGdS,kBAAoB,SAAAO,GAChB,IAAIV,EAAQU,EAAMC,OAAOX,MACnBC,EAAOS,EAAMC,OAAOV,KAE1B,EAAKW,SAAL,eACKX,EAAOD,K,EAIhBM,iBAAmB,SAAAI,GACfA,EAAMG,iBAEN,IAAIC,EAAa,YAAOC,MAAP,YAAgB7B,IACjC8B,QAAQC,IAAIH,GAEZ,IAAII,EAAyBJ,EAAcK,QAAO,SAAAnC,GAC9C,OAAOA,EAASS,UAAU2B,SAAS,EAAKZ,MAAMf,YACvCT,EAASU,SAAS0B,SAAS,EAAKZ,MAAMf,cAEjDuB,QAAQC,IAAIC,GAEZ,EAAKN,SAAS,CAAEH,OAAQS,IAExB,EAAKN,SAAS,CACVnB,UAAW,GACXC,SAAU,M,EAIlB2B,SAAW,WACP,IAAIC,EAAQ,YAAOP,MAAP,YAAgB7B,IAC5B8B,QAAQC,IAAIK,GAEZ,IAAIC,EAASD,EAASE,MAAK,SAACC,EAAGC,GAG3B,OAFAV,QAAQC,IAAIQ,EAAEhC,UAAWiC,EAAEhC,UAC3BsB,QAAQC,IAAIS,EAAEjC,UAAWgC,EAAE/B,UACnB+B,EAAEhC,UAAYiC,EAAEjC,UAAa,EAAMiC,EAAEjC,UAAYgC,EAAEhC,WAAc,EAAI,KAEjFuB,QAAQC,IAAIM,GACZ,EAAKX,SAAS,CAAEH,OAAQc,K,uDAIxB,OACI,yBAAKI,OAAO,sBACR,kBAAC,EAAD,CACIlC,UAAWmC,KAAKpB,MAAMf,UACtBC,SAAUkC,KAAKpB,MAAMd,SACrBS,kBAAmByB,KAAKzB,kBACxBG,iBAAkBsB,KAAKtB,mBAG3B,4BAAQP,MAAM,OAAOM,QAASuB,KAAKP,UAAnC,qBAEA,kBAAC,EAAD,CAAUnC,cAAe0C,KAAKpB,MAAMC,c,GA7DhCoB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,a","file":"static/js/main.f5eee76f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction employee(props) {\n    \n\n    return (\n        <div>\n            {props.employerGroup.length ? (\n                <ul className=\"list-group\">\n\n                    {props.employerGroup.map(result => (\n                        <ul className=\"list-group-item\" key={result.id}>\n                            <div id=\"name\"><b>Name: </b>{result.firstName} {result.lastName}\n                                <br></br>\n                                <b>Title: </b> {result.type}</div>\n                            <div id=\"other\"><i>Email: </i> {result.email}\n                                <br></br>\n                                <i>Phone Number: </i> {result.phone}</div>\n                        </ul>\n                    ))}\n                </ul>\n            ) : (\n                    <h2>Sorry No Employee by that name</h2>\n                )}\n        </div>\n    )\n}\n\nexport default employee;\n","import React from \"react\";\nimport \"./style.css\";\n\n\nfunction Form(props) {\n\n    return (\n        <div>\n            <br></br>\n            <h1>Employee Directory</h1>\n            <br></br>\n            <h3>Enter employee's first name below and click 'Search Employee'</h3>\n\n            <div class=\"entertext\">\n                <form className=\"form\">\n\n                    <input\n                        value={props.firstName}\n                        name=\"firstName\"\n                        onChange={props.handleInputChange}\n                        type=\"text\"\n                        placeholder=\"Names - case sensitive\"\n                    />\n                    <br></br>\n                    <button onClick={props.handleFormSubmit}>Search Employee</button>\n                </form>\n            </div>\n            <br></br>\n            <h5>Use 'Sort Names' button to sort employees alphabetically</h5>\n        </div>\n    );\n\n}\n\nexport default Form;","import React, { Component } from 'react';\nimport './App.css';\nimport Employee from \"./components/employee\";\nimport employerGroup from \"./employerGroup.json\";\nimport Form from \"./components/form\";\n\nclass App extends Component {\n  state = {\n      sorted: employerGroup,\n      firstName: \"\",\n      lastName: \"\"\n  }\n\n  handleInputChange = event => {\n      let value = event.target.value;\n      const name = event.target.name;\n\n      this.setState({\n          [name]: value\n      });\n  };\n\n  handleFormSubmit = event => {\n      event.preventDefault();\n\n      let findFirstName = new Array(...employerGroup)\n      console.log(findFirstName)\n\n      let filtersReturnNewArrays = findFirstName.filter(employee => {\n          return employee.firstName.includes(this.state.firstName)\n              || employee.lastName.includes(this.state.firstName)\n      })\n      console.log(filtersReturnNewArrays)\n\n      this.setState({ sorted: filtersReturnNewArrays })\n\n      this.setState({\n          firstName: \"\",\n          lastName: \"\"\n      });\n  };\n\n  sortName = () => {\n      let unsorted = new Array(...employerGroup)\n      console.log(unsorted)\n\n      let sortof = unsorted.sort((a, b) => {\n          console.log(a.firstName, b.lastName)\n          console.log(b.firstName, a.lastName)\n          return (a.firstName > b.firstName) ? 1 : ((b.firstName > a.firstName) ? -1 : 0)\n      })\n      console.log(sortof)\n      this.setState({ sorted: sortof })\n  }\n\n  render() {\n      return (\n          <div stylle=\"text-align: center\">\n              <Form\n                  firstName={this.state.firstName}\n                  lastName={this.state.lastName}\n                  handleInputChange={this.handleInputChange}\n                  handleFormSubmit={this.handleFormSubmit}\n              />\n\n              <button class=\"sort\" onClick={this.sortName}>Sort Names A to Z</button>\n\n              <Employee employerGroup={this.state.sorted} />\n\n          </div>\n      )\n  }\n\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}